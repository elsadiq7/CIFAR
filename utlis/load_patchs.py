import tensorflow as tf
from PIL import Image
import numpy as np

classes = {0: 'airplane',
           1: 'automobile',
           2: 'bird',
           3: 'cat',
           4: 'deer',
           5: 'dog',
           6: 'frog',
           7: 'horse',
           8: 'ship',
           9: 'truck'}


def load_paths_labels(path):
    with open(path, 'r') as file:
        paths_labels = file.readlines()
    return paths_labels


def handle_images_path_and_labels(paths_labels):
    paths = []
    labels = []
    for i in paths_labels:

        temp = i.split()  # Split to extract image name and label
        image_name = temp[0]
        try:
            labels.append(int(temp[1]))
            paths.append(f"data/images/{classes[int(temp[1])]}/{image_name}")
        except:
            print(i)
    return paths, labels


def get_patch(paths, labels, patch_size):
    for i in range(0, len(labels), patch_size):
        yield paths[i:i + patch_size], labels[i:i + patch_size]


def load_images_patch(paths):
    images = []
    for path in paths:
        img = Image.open(path)
        img_array = np.array(img)
        images.append(img_array)

    return np.array(images)


def read_image_labels(path, patch_size, image_shape):
    # Load image names and labels from the specified file
    paths_labels = load_paths_labels(path)
    # Process the loaded image names to generate paths and corresponding labels
    paths, labels = handle_images_path_and_labels(paths_labels)

    # Generator function to yield image patches and labels
    def generator():
        """
        Generator function to yield image patches and their labels.
        """
        # Loop through patches generated by the get_patch function
        for images_path, images_labels in get_patch(paths, labels, patch_size):
            # Load images and labels for the current patch
            images = load_images_patch(images_path)
            yield np.array(images), np.array(images_labels)

    # Create a TensorFlow dataset from the generator function
    dataset = tf.data.Dataset.from_generator(
        generator,
        output_signature=(
            tf.TensorSpec(shape=(None, image_shape[0], image_shape[1], 3), dtype=tf.uint8),
            # Shape of images: (batch_size, height, width, channels)
            tf.TensorSpec(shape=(None,), dtype=tf.int32)  # Shape of labels: (batch_size,)
        )
    )

    # Define a preprocessing function to normalize images
    def preprocess(images, labels):
        images = tf.cast(images, tf.float32) / 255.0  # Normalize pixel values to the range [0, 1]
        return images, labels  # Return preprocessed images and labels

    # Apply preprocessing, batching, and prefetching to the dataset
    dataset = dataset.map(preprocess)  # Apply the preprocess function to each batch

    return dataset  # Return the prepared dataset
